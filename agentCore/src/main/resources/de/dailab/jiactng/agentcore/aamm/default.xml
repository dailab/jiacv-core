<configuration xmlns="http://www.jiac.de/AAMM/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.jiac.de/AAMM/1.1 http://www.jiac.de/xsd/aamm-1.1.xsd"
	framework="JIAC V">
	
	<import namespace="de.dailab.jiactng.agentcore.aamm.jms" as="jms"/>
	
    <!--
       # The default Node configuration
       # provides an empty platform definition without JMX and directory support.
       # the platform bean may be set as parent in any other platfom definitions 
    -->
	<node id="Node" class="de.dailab.jiactng.agentcore.SimpleAgentNode" />
	
	<!--
      # The default Node configuration
      # provides an empty platform definition without JMX support but with a distributed agent and service directory.
      # the platform bean may be set as parent in any other platfom definitions 
    -->
	<node id="NodeWithDirectory" parent="Node">
		<list name="agentNodeBeans">
			<refItem ref="jms:StandardJMSBroker"/>
			<refItem ref="IDirectory"/>
		</list>
	</node>
	
	<!--
      # The default AgentNode configuration
      # provides an empty platform definition with service directory and JMX support using RMI without registry
      # this platform bean may be set as parent in any other platfom definitions if you want to make use of inheritance
      # other possible properties are:
      * Agents: contains a List of Agents (interface IAgent)
      * EmbeddedBroker: sets an JmsBrokerAMQ (maybe we can introduce a switch wich turns on embedded broker stuff or use a bean for this to be configurable or something) see JMSMessaging.xml for more documentation
      * AgentNodeBeans: a list of AgentNodeBeans
      * ServiceDirectory: sets the ServiceDirectory
      * LoggingConfig: sets the Logging configuration !needs more documentation here!
      * AuthorizationPolicyFilename: sets the file for the java security policy property and activates the security manager
	-->
	<node id="NodeWithJMX" parent="NodeWithDirectory">
		<list name="jmxConnectors">
			<objItem class="de.dailab.jiactng.agentcore.management.jmx.RmiJmxConnector" />
		</list>
	</node>

	<!--
      # The default AgentNode configuration
      # provides an empty platform definition with service directory and JMX support using RMI with registry
      # this platform bean may be set as parent in any other platfom definitions if you want to make use of inheritance
      # other possible properties are:
      * Agents: contains a List of Agents (interface IAgent)
      * EmbeddedBroker: sets an JmsBrokerAMQ (maybe we can introduce a switch wich turns on embedded broker stuff or use a bean for this to be configurable or something) see JMSMessaging.xml for more documentation
      * AgentNodeBeans: a list of AgentNodeBeans
      * ServiceDirectory: sets the ServiceDirectory
      * LoggingConfig: sets the Logging configuration !needs more documentation here!
      * AuthorizationPolicyFilename: sets the file for the java security policy property and activates the security manager
	-->
	<node id="NodeWithRegistry" parent="NodeWithDirectory">
		<list name="jmxConnectors">
			<objItem class="de.dailab.jiactng.agentcore.management.jmx.RmiJmxConnector">
				<simple name="registryPort" value="1099"/>
			</objItem>
		</list>
	</node>
	
	<!--
      # The default AgentNode configuration
      # provides an empty platform definition with service directory and JMX support using RMI with an JAAS authenticator and without registry
      # this platform bean may be set as parent in any other platfom definitions if you want to make use of inheritance
      # other possible properties are:
      * Agents: contains a List of Agents (interface IAgent)
      * EmbeddedBroker: sets an JmsBrokerAMQ (maybe we can introduce a switch wich turns on embedded broker stuff or use a bean for this to be configurable or something) see JMSMessaging.xml for more documentation
      * AgentNodeBeans: a list of AgentNodeBeans
      * ServiceDirectory: sets the ServiceDirectory
      * LoggingConfig: sets the Logging configuration !needs more documentation here!
      * AuthorizationPolicyFilename: sets the file for the java security policy property and activates the security manager
	-->
	<node id="NodeWithSecuredJMX" parent="NodeWithDirectory">
		<list name="jmxConnectors">
			<objItem class="de.dailab.jiactng.agentcore.management.jmx.RmiJmxConnector">
				<object name="authenticator" class="de.dailab.jiactng.agentcore.management.jmx.JaasAuthenticator">
					<list name="configuration">
						<objItem class="de.dailab.jiactng.agentcore.management.jmx.JaasConfigurationEntry">
							<simple name="loginModuleName" value="com.sun.security.auth.module.Krb5LoginModule"/>
							<simple name="controlFlag" value="required"/>
							<map name="options">
								<valueEntry key="debug" value="false"/>
								<valueEntry key="useTicketCache" value="false"/>
							</map>
						</objItem>
					</list>
					<map name="systemProperties">
						<valueEntry key="java.security.krb5.realm" value="DAI-LAB.DE"/>
						<valueEntry key="java.security.krb5.kdc" value="birke4.dai-lab.de"/>
					</map>
				</object>
			</objItem>
		</list>
	</node>
	
	<agent id="SimpleAgent" class="de.dailab.jiactng.agentcore.Agent">
		<simple name="executionInterval" value="10" />
		<objectRef name="memory" ref="Memory"/>
		<objectRef name="execution" ref="SimpleExecutionCycle"/>
	</agent>
	
	<agent id="NonBlockingAgent" parent="SimpleAgent">
		<objectRef name="execution" ref="NonBlockingExecutionCycle"/>
	</agent>
	
	<agent id="SimpleAgentWithCommunication" parent="SimpleAgent">
		<agentElementRef ref="CommunicationBean"/>
	</agent>
	
	<agent id="NonBlockingAgentWithCommunication" parent="SimpleAgentWithCommunication">
		<objectRef name="execution" ref="NonBlockingExecutionCycle"/>
	</agent>
	
	<agentElement id="CommunicationBean" class="de.dailab.jiactng.agentcore.comm.CommunicationBean">
		<list name="transports">
			<refItem ref="jms:StandardJMSMessageTransport"/>
		</list>
	</agentElement>
	
	<!-- 
		##################################################################
		# Bean providing yellow and white pages functionality for agents #
		##################################################################
	 -->
	<object id="IDirectory" class="de.dailab.jiactng.agentcore.directory.DirectoryAgentNodeBean">
		<objectRef name="messageTransport" ref="jms:StandardJMSMessageTransport"/>
	</object>
	
	<object id="Memory" class="de.dailab.jiactng.agentcore.knowledge.Memory" />
	
	<object id="SimpleExecutionCycle" class="de.dailab.jiactng.agentcore.execution.SimpleExecutionCycle" />
	
	<object id="NonBlockingExecutionCycle" class="de.dailab.jiactng.agentcore.execution.NonBlockingExecutionCycle" />
</configuration>
