<?xml version="1.0" encoding="UTF-8"?>

<!--
	- This file specifies all JMS-relevant entities for the JIAC-TNG agentCore
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!--
		Abstract configuration of an ActiveMQ broker.
		It has the following properties:
		* persistent: indicates whether messages should be stored in a data base or not. ActiveMQ
		uses Derby to store message. You must include this dependency explicitly in your project!
		* connectors: The set of connectors. Each broker automatically has a VMConnector which allows
		VM-internal connections. For identification of this VMConnector you have to use the brokerName.
		
		You can instantiate the ActiveMQBroker class only once. So if you define several broker configurations
		you have to ensure the following:
		1. declare them as singletons
		2. set lazy-init to true
		The second point is the most crucial one because Spring usually instantiate _all_ singletons it can find!
		Singleton is here used in terms of "one-bean-reference-at-a-time" and not on class-level!
	-->
	<bean name="ActiveMQBroker" class="de.dailab.jiactng.agentcore.comm.broker.ActiveMQBroker" abstract="true">
		<property name="persistent" value="false" />
	</bean>

	<!--
		The standard JMS Broker.
		It has a standard TCP connector which maintains a multicast discovery mechanism.
	-->
	<bean name="StandardJMSBroker" parent="ActiveMQBroker" scope="singleton" lazy-init="true">
		<property name="connectors">
			<set>
				<ref bean="StandardTCPConnector" />
			</set>
		</property>
	</bean>

	<!--
		The standard JMS Broker with fixed port number.
		It has a standard TCP connector which maintains a multicast discovery mechanism.
	-->
	<bean name="StandardJMSBrokerFixedPort" parent="ActiveMQBroker" scope="singleton" lazy-init="true">
		<property name="connectors">
			<set>
				<ref bean="StandardTCPConnectorFixedPort" />
			</set>
		</property>
	</bean>

	<!-- 
		Abstract configuration for a transport connector.
	-->
	<bean name="ActiveMQTransportConnector" class="de.dailab.jiactng.agentcore.comm.broker.ActiveMQTransportConnector"
		abstract="true">
	</bean>

	<!-- 
		Definition of the standard TCP connector for ActiveMQ.
		It specifies the transport address and the default multicast address for discovery.
	-->
	<bean name="StandardTCPConnector" parent="ActiveMQTransportConnector" scope="singleton" lazy-init="true">
		<property name="transportURI" value="tcp://0.0.0.0:0" />
		<property name="discoveryURI" value="smartmulticast://default?group=jiac-tng" />
	</bean>

	<!-- 
		Definition of the standard TCP connector with fixed port for ActiveMQ.
		It specifies the transport address and the default multicast address for discovery.
	-->
	<bean name="StandardTCPConnectorFixedPort" parent="ActiveMQTransportConnector" scope="singleton" lazy-init="true">
		<property name="transportURI" value="tcp://0.0.0.0:61616" />
		<property name="discoveryURI" value="smartmulticast://default?group=jiac-tng" />
	</bean>

	<!-- 
		The standard JMS connection factory connects to the broker via VM-connector.
		Thus you have to ensure that the brokerURL is the unique name of the broker associated
		with the node.
		
		See the de.dailab.jiactng.agentcore.comm.broker.ActiveMQBroker documentation for more details.
	-->
	<bean name="StandardJMSConnectionFactory" class="de.dailab.jiactng.agentcore.comm.broker.ConnectionFactoryProxy"
		scope="prototype"/>
<!--		lazy-init="true"/>-->

	<!-- 
		The standard JMS message transport for the communication bean (an agent bean).
		By default, it maintains a VM-connection the node's broker.
		
		If you want to use this message transport, you have to ensure that your agent node
		has the StandardJMSBroker agent node bean installed. Otherwise this transport cannot access
		the broker!
	-->
	<bean name="StandardJMSMessageTransport" class="de.dailab.jiactng.agentcore.comm.transport.jms.JMSMessageTransport"
		scope="prototype">
<!--		 lazy-init="true">-->
		<property name="connectionFactory" ref="StandardJMSConnectionFactory" />
	</bean>
</beans>


