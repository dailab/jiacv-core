<?xml version="1.0"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://cyber888.com/xsd/xdocs.xsd">
	<properties>
		<title>Directory of Agents and Services</title>
		<author email="martin.loeffelholz@dai-labor.de"> Martin Loeffelholz	</author>
		<author email="axel.hessler@dai-labor.de"> Axel Hessler	</author>
	</properties>
	<body>
		<section name="Introduction">
			<subsection name="What does this Directory provide">
				<p>
					The directory provides white and yellow pages services and supplies an API for...
					<ul>
						<li>registering, updating and deleting information about agents and their actions</li>
						<li>
							searching for agents and actions on the local <code>AgentNode</code>, and, globally,
							on all other known <code>AgentNode</code>s (which we call Platform)
						</li>
					</ul>
				</p>
				<p>
					The directory also provides...
					<ul>
						<li>
							caching of information about agents and actions of remote
							<code>AgentNode</code>s
						</li>
						<li>
							automatic propagation of changes from one	<code>AgentNode</code> to other AgentNodes via
							advertisements
						</li>
						<li>
							automatic update of information about agents and action on the own node as
							well as on other nodes
						</li>
					</ul>
				</p>
			</subsection>

			<subsection name="DirectoryAgentNodeBean and what it does">
				<p>
					The directory consists of one <code>AgentNode</code> component: the <b>DirectoryAgentNodeBean</b>
					This bean holds the actual information about agents and their actions and 
					can be plugged into the <code>AgentNode</code>. It communicates with directories of other
					<code>AgentNode</code>s and thus requires a message broker component to do this.
				</p>
			</subsection>
		</section>


		<section name="Getting started">
			<subsection name="The AgentNode-Side">
				<p>
					The easiest and safest way to have a directory on your <code>AgentNode</code> is to
					extend one of the pre-configured <code>AgentNode</code>s that come with the JIAC release.
					For example:
					<source>
&lt;beans&gt;
	...
	&lt;import resource="classpath:de/dailab/jiactng/agentcore/conf/AgentNode.xml"/&gt;
	...						
	&lt;bean name="MyAgentNode" parent="NodeWithJMX"&gt;
	...

					</source>
				</p>
				<p>
					Those who want full control over the <code>AgentNode</code> add the following lines in
					the node configuration to have the directory ready:
					<source>
	...
	&lt;import resource="classpath:de/dailab/jiactng/agentcore/conf/AgentNode.xml"/&gt;
	...						
	&lt;bean name="MyAgentNode"  class="de.dailab.jiactng.agentcore.SimpleAgentNode"&gt;
		...
		&lt;property name="agentNodeBeans"&gt;
			&lt;list&gt;
				&lt;ref bean="StandardJMSBroker"/&gt;
				&lt;ref bean="IDirectory"/&gt;
			&lt;/list&gt;
		&lt;/property&gt;
		...
					</source> 
				</p>
			</subsection>

			<subsection name="The Agent-Side">
				<p>
					Already done. As far as you have configured your <code>AgentNode</code> properly,
					all directory services are available in your agent. Moreover, every agent and every
					<code>Action</code> you've implemented in an <code>AgentBean</code> will be
					registered automatically.
				</p>
				<p>
					Providing an action can be done fairly easy. For example, imagine a simple action <i>echo</i> that gets
					a string as input and returns it unchanged:
					<source>
	public MyAgentBean extends extends AbstractMethodExposingBean {
		@Expose(scope=ActionScope.GLOBAL)
		public String echo(String s) {
			return s;
		}
	}
					</source>
					During <i>INITIALIZING</i> life-cycle state the action will be registered
					in the directory and during <i>CLEANING_UP</i> it will be unregistered automatically,
					provided that the <code>ActionScope</code> is set right. There are four
					<code>ActionScope</code>s at the moment:
					<dl>
						<dt>AGENT</dt><dd>the action is only known to the agent who provides it</dd>
						<dt>NODE</dt><dd>the action is known to all agents residing on the same node, includes AGENT</dd>
						<dt>GLOBAL</dt><dd>the action is know to all agents in the platform (i.e. is propagated
							to all known AgentNodes), includes NODE</dd>
						<dt>WEBSERVICES</dt><dd>if a webservice gateway agent has been configured on the node, the
							action is provided as webservice, includes GLOBAL</dd>
					</dl>
				</p>
				<p>
					For searching an agent or action use one of the following methods:
					<source>
	IAgentDescription agent = thisAgent.searchAgent((IAgentDescription)template);
	List&lt;IAgentDescription&gt; agentList = thisAgent.searchAllAgents((IAgentDescription)template);
	
	IActionDescription action = thisAgent.searchAction((IActionDescription)template);
	List&lt;IActionDescription&gt; actionList = thisAgent.searchAllActions((IActionDescription)template);
					</source>
				</p>
			</subsection>
		</section>
		
		<section name="Usage - How to...">

			<subsection name="How do I add and remove agents to and from the directory?">
			</subsection>
	
			<subsection name="How do I add and remove actions to and from the directory?">
			</subsection>
			
			<subsection name="How do I find actions?">
			</subsection>
			
			<subsection name="How do I find remote actions?">
			</subsection>
			
			<subsection name="How can I use actions">
			</subsection>
		
		</section>
		
	</body>

</document>