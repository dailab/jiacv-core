<?xml version="1.0"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://cyber888.com/xsd/xdocs.xsd">
	<properties>
		<title>agentCore Documentation</title>
		<author email="marcel.patzlaff@dai-labor.de">Marcel Patzlaff</author>
		<author email="martin.loeffelholz@dai-labor.de">Martin Loeffelholz</author>
	</properties>
	<body>
		<section name="Agent Communication">
			<p>
				AgentCore defines a generic layer for message-based communication. This layer is available in the
				<a href="apidocs/de/dailab/jiactng/agentcore/comm/package-summary.html">
					<code>de.dailab.jiactng.agentcore.comm</code>
				</a>
				and
				<a href="apidocs/de/dailab/jiactng/agentcore/comm/transport/package-summary.html">
					<code>de.dailab.jiactng.agentcore.comm.transport</code>
				</a>
				packages. The following list describes the most essential classes and their functions:
				<ul>
					<li>
						<a href="apidocs/de/dailab/jiactng/agentcore/comm/CommunicationBean.html">
							<code>CommunicationBean</code>
						</a>
						<br />
						The CommunicationBean is an agent component which provides access to the message bus. It can be
						configured with one or more message transports. If no transports are available, then this bean
						cannot do anything.
					</li>
					<li>
						<a href="apidocs/de/dailab/jiactng/agentcore/comm/transport/MessageTransport.html">
							<code>MessageTransport</code>
						</a>
						<br />
						The MessageTransport is an abstract class which defines send and un-/registering primitives for
						the various message busses.
					</li>
					<li>
						<a href="apidocs/de/dailab/jiactng/agentcore/comm/CommunicationAddressFactory.html">
							<code>CommunicationAddressFactory</code>
						</a>
						<br />
						This factory class is the only way to create communication addresses. There are two different
						types of addresses which covers 1:1 (message box) and 1:n (group) communication.
					</li>
				</ul>
			</p>
			<p>
				Currently the message bus in AgentCore, which connects agents (on the same or on remote hosts), is a JMS
				implementation.
			</p>
			<subsection name="Using the CommunicationBean">
				<p>
					There are two ways to use the functionalities of the communication bean. First you can iterate
					through the agent's beans list to find an instance of
					<a href="apidocs/de/dailab/jiactng/agentcore/comm/CommunicationBean.html">
						<code>CommunicationBean</code>
					</a>
					and use this reference. This is considered to be the dirty way.
				</p>
				<p>
					The second and better possibility is to use the actions the <code>CommunicationBean</code>
					offers. Just take a look at the <b>TODO: insert link to action description here</b> for instructions
					how to use the standard action invocation mechanism.
				</p>
			</subsection>

			<subsection name="Configuring the Communication">
				<p>
					AgentCore defines some beans for the communication in configuration files. There are beans for the
					node which configure an ActiveMQ-Broker which is in fact our message bus. Client access for the
					agents is granted through the <code>CommunicationBean</code> definition. The associated
					<code>StandardJMSMessageTransport</code> connects to the broker through a VM-
					<code>ConnectionFactory</code>.
				</p>
				<p>
					An example configuration for two agents which can communicate is given:
					<source>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd"&gt;

&lt;!--
	- Application context definition for "example" Ping-Pong Scenario.
--&gt;
&lt;beans&gt;
	&lt;import resource="classpath:de/dailab/jiactng/agentcore/conf/AgentBeans.xml"/&gt;
	&lt;import resource="classpath:de/dailab/jiactng/agentcore/conf/AgentNode.xml"/&gt;
	&lt;import resource="classpath:de/dailab/jiactng/agentcore/conf/Agent.xml"/&gt;
	
	&lt;bean name="PingPongPlatform" parent="Platform"&gt;
		&lt;property name="agentNodeBeans"&gt;
			&lt;list&gt;
				&lt;ref bean="StandardJMSBroker"/&gt;
			&lt;/list&gt;
		&lt;/property&gt;
		&lt;property name="agents"&gt;
			&lt;list&gt;
				&lt;ref bean="Pinger" /&gt;
				&lt;ref bean="Ponger" /&gt;
			&lt;/list&gt;
		&lt;/property&gt;
	&lt;/bean&gt;
	
	&lt;bean name="Pinger" parent="SimpleAgent" singleton="false"&gt;
		&lt;property name="agentBeans"&gt;
			&lt;list&gt;
				&lt;ref bean="CommunicationBean" /&gt;
				&lt;ref bean="PingerBean" /&gt;
			&lt;/list&gt;
		&lt;/property&gt;
	&lt;/bean&gt;

	&lt;bean name="Ponger" parent="SimpleAgent" singleton="false"&gt;
		&lt;property name="agentBeans"&gt;
			&lt;list&gt;
				&lt;ref bean="CommunicationBean" /&gt;
				&lt;ref bean="PongerBean" /&gt;
			&lt;/list&gt;
		&lt;/property&gt;
	&lt;/bean&gt;

	&lt;bean name="PongerBean" class="de.dailab.jiactng.agentcore.comm.jms.PongerBean" singleton="false" /&gt;
	&lt;bean name="PingerBean" class="de.dailab.jiactng.agentcore.comm.jms.PingerBean" singleton="false" /&gt;
&lt;/beans&gt;
					</source>
				</p>
				<p>
					Please take a look in the <code>de.dailab.jiactng.agentcore.conf</code> package where the default
					configuration files are located.
				</p>
			</subsection>
		</section>
	</body>
</document>