<?xml version="1.0"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://cyber888.com/xsd/xdocs.xsd">
  <properties>
    <title>agentCore Documentation</title>
    <author email="axel.hessler@dai-labor.de">axle</author>
    <author email="jan.keiser@dai-labor.de">Jan Keiser</author>
  </properties>
  <body>
    <section name="agentCore Documentation"> 
      <p>This section provides an overview about agentCore.</p>
      <p>The next figure gives an overview about the hierarchy of
         classes and interfaces related to all lifecycle-aware and
         manageable elements (agent nodes, agents and agent beans) of JIAC TNG.
         It contains all methods specified by the interfaces, all
         attributes of the classes and all methods implemented by the 
         classes additional to their implemented interfaces. The type
         of attributes and the type of method results are given after
         the colon. Input parameters are ignored in this view. The
         character before the name of attributes and methods describes
         their visibility (-private, #protected, +public).</p>
         
         <a href="images/StaticStructure.png">
	      <img src="images/StaticStructure.png"/>
	     </a>
	  <subsection name="Management interface">
	    <p>The management interface of JIAC TNG is based on 
	       <a href="http://java.sun.com/j2se/1.5.0/docs/guide/jmx/">JMX</a> 
	       (Java Management Extensions). Every JVM contains a MBean server
	       where all manageable resources (agent nodes and agents) are 
	       registered. Agent Nodes are registered with the object name 
	       "de.dailab.jiactng.agentcore:type=SimpleAgentNode,name=<i>myNodeName</i>" 
	       and agents with the object name "de.dailab.jiactng.agentcore:type=Agent,name=<i>myAgentName</i>".
	       The interfaces <a href="apidocs/de/dailab/jiactng/agentcore/SimpleAgentNodeMBean.html"><code>SimpleAgentNodeMBean</code></a> 
	       and <a href="apidocs/de/dailab/jiactng/agentcore/AgentMBean.html"><code>AgentMBean</code></a> 
	       specify the manageable attributes (getter and setter methods) and 
	       the executable operations (all other methods) of these resources.
	    </p>
	    <p>While no security settings are made, every object has the possibility 
	       to manage all resources. To manage resources which are located in the 
	       same JVM (agent node) you have to
	       <ul>
	         <li>allow local invocations by setting the appropriate property</li>
	         <li>get a reference to the <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServer.html">MBean server</a></li>
	         <li>specify the respective <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/ObjectName.html">object name</a> of the resources</li>
	       </ul>
	       <source>
System.setProperty("jmx.invoke.getters", "");
MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
try {
    ObjectName node = new ObjectName("de.dailab.jiactng.agentcore:type=SimpleAgentNode,name=<i>myAgentNode</i>");
    ObjectName agent = new ObjectName("de.dailab.jiactng.agentcore:type=Agent,name=<i>myAgent</i>");
} catch (Exception e) {
    System.err.println("Wrong parameter format for construction of the object name of resources");
}</source>
	       The method <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServer.html#getAttribute(javax.management.ObjectName, java.lang.String)"><code>getAttribute</code></a> 
	       of the MBean server enables to
	       read the current attribute values of agent nodes (Name, UUID, Host, 
	       Agents, LifecycleState or Owner) and agents (Name, AgentNodeUUID, 
	       LifecycleState or Owner).
	       <source>
try {
    String owner = (String) mbs.getAttribute(node, "Owner");
} catch (JMException e) {
    System.err.println("Error when getting agent node's owner");
}</source>
	       The method <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServer.html#invoke(javax.management.ObjectName, java.lang.String, java.lang.Object[], java.lang.String[])"><code>invoke</code></a> 
	       of the MBean server enables to execute
	       operations on agent nodes (addAgents, init, start, stop, cleanup or 
	       shutdown) and agents (remove, init, start, stop or cleanup).
	       <source>
try {
    mbs.invoke(node, "addAgents", new Object[] {"<i>myPath</i>/<i>mySpringConfigurationXMLFile</i>"}, new String[] {"java.lang.String"});
} catch (JMException e) {
    System.err.println("Error when adding new agents to the agent node");
}</source>
	       The method <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServer.html#addNotificationListener(javax.management.ObjectName, javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)"><code>addNotificationListener</code></a> 
	       of the MBean server enables to subscribe for notifications about changed attribute values 
	       on agent nodes (LifecycleState, Agents) and agents (LifecycleState).
	       The class of the subscribing object must implement the interface 
	       <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/NotificationListener.html"><code>NotificationListener</code></a> 
	       with the method <code>handleNotification</code>.
	       <source>
AttributeChangeNotificationFilter acnf = new AttributeChangeNotificationFilter();
try {
    acnf.enableAttribute("LifecycleState");
    acnf.enableAttribute("Agents");
} catch (IllegalArgumentException e) {
    System.err.println("Wrong attribute name when enabling attribute change notifications");
}
try {
    mbs.addNotificationListener(node, this, acnf, null);
} catch (InstanceNotFoundException e) {
    System.err.println("Agent node with the specified object name not registered");
}</source>
	    </p>
	    <p>To manage resources which are located in another JVM (agent node) you 
	       have to use a <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/MBeanServerConnection.html">MBean server connection</a> 
	       instead of the reference. Different
	       protocol implementations for a JMX connector already exist (e.g. 
	       <a href="http://java.sun.com/j2se/1.5.0/docs/">RMI</a>, 
	       <a href="http://mx4j.sourceforge.net/">SOAP</a>, 
	       <a href="https://ws-jmx-connector.dev.java.net/">WS</a>, 
	       <a href="http://lingo.codehaus.org/">JMS</a>) but 
	       only the RMI connector is part of JRE version 1.5 or higher. If you want
	       to use a RMI registry as a lookup service, you have to specify the host
	       and port of the registry as well as the name of the agent node within the
	       URL path instead of specify host, port and JMX-ID of the agent node directly.
	       <source>
try {
    JMXServiceURL url = new JMXServiceURL("rmi", null, 0, "/jndi/rmi://" + <i>myRegistryHost</i> + ":" + <i>myRegistryPort</i> + "/" + <i>myAgentNodeName</i>);
    JMXConnector jmxc = JMXConnectorFactory.connect(url);
    MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();
}
catch (MalformedURLException e) {
    System.err.println("One of the URL parts are syntactically incorrect or the local host name can not be identified");
}
catch (IOException) {
    System.err.println("Communication problem when creating connector or connection");
}</source>
	       Condition for the remote management is that the agent node has created
	       a corresponding connector server for the choosed protocol. This can be
	       achieved by extension of the agent node's spring configuration.
	       <source>
&lt;bean name="<i>myPlatform</i>" class="de.dailab.jiactng.agentcore.SimpleAgentNode"&gt;
  &lt;property name="jmxConnectors"&gt;
    &lt;set&gt;
      &lt;map&gt;
        &lt;entry key="protocol" value="rmi"/&gt;
        &lt;entry key="registryHost" value="<i>myRegistryHost</i>"/&gt;
        &lt;entry key="registryPort" value="<i>myRegistryPort</i>"/&gt;
      &lt;/map&gt;
    &lt;/set&gt;
  &lt;/property&gt;
&lt;/bean&gt;</source>
	    </p>
	  </subsection>
    </section>
  </body>
</document>