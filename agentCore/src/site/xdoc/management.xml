<?xml version="1.0"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://cyber888.com/xsd/xdocs.xsd">
  <properties>
    <title>agentCore Documentation</title>
    <author email="axel.hessler@dai-labor.de">axle</author>
    <author email="jan.keiser@dai-labor.de">Jan Keiser</author>
  </properties>
  <body>
    <section name="Management interface">
	    <p>The management interface of JIAC TNG is based on 
	       <a href="http://java.sun.com/javase/6/docs/guide/jmx/">JMX</a> 
	       (Java Management Extensions). Every JVM contains a MBean server
	       where all manageable resources (agent nodes, agents, agent beans and 
	       other resources) are registered. All interfaces <code>*MBean</code> (e.g.
	       <a href="apidocs/de/dailab/jiactng/agentcore/SimpleAgentNodeMBean.html">
               <code>SimpleAgentNodeMBean</code></a>,
	       <a href="apidocs/de/dailab/jiactng/agentcore/AgentMBean.html"><code>AgentMBean</code></a>
	       and <a href="apidocs/de/dailab/jiactng/agentcore/AbstractAgentBeanMBean.html">
	       <code>AbstractAgentBeanMBean</code></a>)
	       specify the manageable attributes (getter and setter methods) and 
	       the executable operations (all other public methods) of these resources.
	    </p>

    <subsection name="Local Management">
	    <p>While no security settings are made, every object has the possibility 
	       to manage all resources. To manage resources which are located in the 
	       same JVM (agent node) you have to
	       <ul>
	         <li>allow local invocations by setting the appropriate property</li>
	         <li>get a reference to the <a href="http://java.sun.com/javase/6/docs/api/javax/management/MBeanServer.html">MBean server</a></li>
	         <li>specify the respective <a href="http://java.sun.com/javase/6/docs/api/javax/management/ObjectName.html">object name</a> of the resources</li>
	       </ul>
	       <source>
System.setProperty("jmx.invoke.getters", "");
MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
JmxManager manager = new JmxManager();
try {
    ObjectName node = manager.getMgmtNameOfAgentNode("<i>myAgentNodeName</i>");
    ObjectName agent = manager.getMgmtNameOfAgent("<i>myAgentNodeName</i>", "<i>myAgentId</i>");
    ObjectName bean = manager.getMgmtNameOfAgentBean("<i>myAgentNodeName</i>", "<i>myAgentId</i>", "<i>myAgentBeanName</i>");
} catch (Exception e) {
    System.err.println("Wrong parameter format for construction of the object name of resources");
}</source>
	       The method <a href="http://java.sun.com/javase/6/docs/api/javax/management/MBeanServer.html#getAttribute(javax.management.ObjectName, java.lang.String)"><code>getAttribute</code></a> 
	       of the MBean server enables to
	       read the current attribute values of agent nodes (e.g. Name, UUID, Host, 
	       Agents, LifecycleState or Owner), agents (e.g. AgentName, AgentId, 
	       LifecycleState, Owner or AgentBeanNames), agent beans (e.g. BeanName or LifecycleState)
	       and other resources.
	       <source>
try {
    String owner = (String) mbs.getAttribute(node, "Owner");
} catch (JMException e) {
    System.err.println("Error when getting agent node's owner");
}</source>
	       The method <a href="http://java.sun.com/javase/6/docs/api/javax/management/MBeanServer.html#setAttribute(javax.management.ObjectName, javax.management.Attribute)"><code>setAttribute</code></a> 
	       of the MBean server enables to
	       change attribute values of agents (AgentName, Owner or BeanExecutionTimeout),
	       agent beans (BeanName) and other resources.
	       <source>
try {
    mbs.setAttribute(agent, new Attribute("BeanExecutionTimeout", 15000));
} catch (JMException e) {
    System.err.println("Error when changing agent's timout for bean executions");
}</source>
	       The method <a href="http://java.sun.com/javase/6/docs/api/javax/management/MBeanServer.html#invoke(javax.management.ObjectName, java.lang.String, java.lang.Object[], java.lang.String[])"><code>invoke</code></a> 
	       of the MBean server enables to execute
	       operations on agent nodes (addAgents, init, start, stop, cleanup or 
	       shutdown), agents (remove, init, start, stop or cleanup), agent beans 
	       (init, start, stop or cleanup) and other resources.
	       <source>
try {
    mbs.invoke(node, "addAgents", new Object[] {"<i>myPath</i>/<i>mySpringConfigurationXMLFile</i>"}, new String[] {"java.lang.String"});
} catch (JMException e) {
    System.err.println("Error when adding new agents to the agent node");
}</source>
	       The method <a href="http://java.sun.com/javase/6/docs/api/javax/management/MBeanServer.html#addNotificationListener(javax.management.ObjectName, javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)"><code>addNotificationListener</code></a> 
	       of the MBean server enables to subscribe for notifications about 
	       <a href="http://java.sun.com/javase/6/docs/api/javax/management/AttributeChangeNotificationFilter.html">changed attribute values</a> 
	       on agent nodes ("LifecycleState", "Agents"), agents ("LifecycleState"), agent beans ("LifecycleState")
	       and other resources, about <a href="apidocs/de/dailab/jiactng/agentcore/management/jmx/MessageExchangeNotificationFilter.html">exchanged messages</a> 
	       between the <a href="apidocs/de/dailab/jiactng/agentcore/comm/CommunicationBean.html">communication bean</a> of agents and 
	       about <a href="apidocs/de/dailab/jiactng/agentcore/management/jmx/ActionPerformedNotificationFilter.html">performed actions</a> 
	       by the <a href="apidocs/de/dailab/jiactng/agentcore/SimpleExecutionCycle.html">execution cycle</a> of agents.
	       The class of the subscribing object must implement the interface 
	       <a href="http://java.sun.com/javase/6/docs/api/javax/management/NotificationListener.html"><code>NotificationListener</code></a> 
	       with the method <code>handleNotification</code>.
	       <source>
AttributeChangeNotificationFilter acnf = new AttributeChangeNotificationFilter();
try {
    acnf.enableAttribute("LifecycleState");
    acnf.enableAttribute("Agents");
} catch (IllegalArgumentException e) {
    System.err.println("Wrong attribute name when enabling attribute change notifications");
}
try {
    mbs.addNotificationListener(node, this, acnf, null);
} catch (InstanceNotFoundException e) {
    System.err.println("Agent node with the specified object name not registered");
}</source>
	    </p>
    </subsection>

    <subsection name="Remote Management">
	    <p>To manage resources which are located in another JVM (agent node) you 
	       have to use a <a href="http://java.sun.com/javase/6/docs/api/javax/management/MBeanServerConnection.html">MBean server connection</a> 
	       to a JMX connector server of the remote JVM instead of a reference to the local MBean server. 
	       Different protocol implementations for a JMX connector already exist (e.g. 
	       <a href="http://java.sun.com/javase/6/docs/">RMI</a>, 
	       <a href="http://mx4j.sourceforge.net/">SOAP</a>, 
	       <a href="https://ws-jmx-connector.dev.java.net/">WS</a>, 
	       <a href="http://lingo.codehaus.org/">JMS</a>) but 
	       only the RMI connector is part of JRE version 1.5 or higher. 
	    </p>
	    <p> 
	       To get the URL of the
	       JMX connector servers of agent nodes you can use a RMI registry or the multicast
	       mechanism. With the following code you can read the entries of a registry.
	       <source>
String[] nodeIds = new String[0];
try {
    Registry registry = LocateRegistry.getRegistry(<i>myRegistryHost</i>, <i>myRegistryPort</i>);
    nodeIds = registry.list();
catch(RemoteException e) {
    System.err.println("Registry on specified host and port not available");
}
for (int i=0; i&lt;nodeIds.length; i++) {
    if (nodeIds[i].startsWith(IdFactory.IdPrefix.Node.toString())) {
        try {
            JMXServiceURL url = new JMXServiceURL("rmi", null, 0, "/jndi/rmi://" + <i>myRegistryHost</i> + ":" + <i>myRegistryPort</i> + "/" + nodeIds[i]);
            ...
        }
        catch (MalformedURLException e) {
            System.err.println("One of the URL parts are syntactically incorrect or the local host name can not be identified");
        }
    }
}</source>
	       To receive the URLs via multicast within the same subnet you can use the following code:
	       <source>
try {
    byte[] buffer = new byte[1000];
    DatagramPacket dp = new DatagramPacket(buffer, buffer.length);
    MulticastSocket socket = new MulticastSocket(9999);
    socket.setTimeToLive(1);
    InetAddress group = InetAddress.getByName("226.6.6.7");
    socket.joinGroup(group);
    while (true) {
        dp.setLength(1000);
        socket.receive(dp);
        buffer = dp.getData();
        String message = new String(buffer, 0, dp.getLength());
        JMXServiceURL url = new JMXServiceURL(message);
        ...
    }
    socket.leaveGroup(group);
} catch (Exception e) {
    System.err.println("Error while getting URL of JMX connector servers");
}</source>
	       To establish a MBean server connection to a remote agent node you
	       have to do following:
	       <source>
try {
    JMXConnector jmxc = JMXConnectorFactory.connect(url);
    MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();
}
catch (IOException) {
    System.err.println("Communication problem when creating connector or connection");
}</source>
	       Condition for the remote management is that the agent node has created
	       at least one JMX connector server. You can achieve this for example by 
	       using "PlatformWithJMX" or "PlatformWithRegistry" instead of "Platform" 
	       as parent of agent node's spring configuration.
	       <source>
&lt;bean name="<i>myPlatform</i>" parent="PlatformWithJMX"&gt;
&lt;/bean&gt;</source>
           The first configuration creates a RMI connector server which URL is
           announced via multicast on port 9999 and group "226.6.6.7". The second
           configuration uses additionally a local registry on port 1099 to
           announce the URL.
	    </p>
    </subsection>

    <subsection name="Security">
	    <p>
	       To restrict the access to remote management functions you may add authentication and 
	       authorization to the agent node. For authentication you can use "PlatformWithSecuredJMX"
	       as parent of agent node's spring configuration which contains a JAAS-based authenticator
	       for an active directory. Instead of this configuration you may use any other authenticators
           (e.g. of module <a href="../basicServices/userManagement/">userManagement</a>) which implement the interface 
           <a href="http://java.sun.com/javase/6/docs/api/javax/management/remote/JMXAuthenticator.html">JMXAuthenticator</a>.
	       <source>
&lt;bean name="<i>myPlatform</i>" parent="PlatformWithSecuredJMX"&gt;
  &lt;property name="authorizationPolicyFilename" value="<i>myJavaPolicyFile</i>"/&gt;
&lt;/bean&gt;</source>
           For authorization you can specify the name of a Java policy file which defines the
           permissions of different users:
	       <source>
// read-write access for all classes loaded by the JVM of the agent node (local management)
grant codeBase "file:../lib/*" {
    permission java.security.AllPermission;
};

// read-write access for user1 (remote management)
grant principal javax.management.remote.JMXPrincipal "<i>user1@DAI-LAB.DE</i>" {
    permission java.security.AllPermission;
};

// read-only access for user2 (remote management)
grant principal javax.management.remote.JMXPrincipal "<i>user2@DAI-LAB.DE</i>" {
    permission javax.management.MBeanPermission "*", "getDomains";
    permission javax.management.MBeanPermission "*", "queryMBeans";
    permission javax.management.MBeanPermission "*", "queryNames";
    permission javax.management.MBeanPermission "*", "getMBeanInfo";
    permission javax.management.MBeanPermission "*", "getAttribute";
    permission javax.management.MBeanPermission "*", "addNotificationListener";
    permission javax.management.MBeanPermission "*", "removeNotificationListener";
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.lang.RuntimePermission "getClassLoader";
    permission java.util.PropertyPermission "*", "read";
};</source>
	       To connect to a secured agent node the client has also to specify username and password:
	       <source>
try {
    HashMap&lt;String,Object&gt; env = new HashMap&lt;String,Object&gt;();
    String[] creds = {<i>myUserName</i>, <i>myPassword</i>};
    env.put(JMXConnector.CREDENTIALS, creds);
    JMXConnector jmxc = JMXConnectorFactory.connect(url, env);
    MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();
}
catch (IOException) {
    System.err.println("Communication problem when creating connector or connection");
}
catch (SecurityException) {
    System.err.println("Authentication failed");
}</source>
	    </p>
    </subsection>

    <subsection name="Management Client">
	    <p>
	       With the <a href="apidocs/de/dailab/jiactng/agentcore/management/jmx/client/JmxManagementClient.html">
	       management client API</a> it is very easy to manage local or remote JIAC TNG resources.
	       It allows to search for JMX connector server, to establish connections to remote processes,
	       and to get specific clients to manage agent nodes, agent node directories, agents, 
	       agent memories, agent execution cycles, agent communication beans or other agent beans.
	    </p>
    </subsection>
    </section>
  </body>
</document>