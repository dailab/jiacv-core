Application name: pingPong_WithTLS
----------------------------------

>> PURPOSE ---------------------------------------------

The purpose of this example is to show how a JIAC V-MAS consisting of two or more AgentNodes can be implemented together with TLS support (formerly known as SSL). And the example attends to demonstrate how this TLS-secured MAS can be monitored with the monitoring software ASGARD.

For a detailed explanation of TLS and how to configure a JIAC V MAS in order to support TLS, please refer to the JIAC V manual.


>> Overview ---------------------------------------------

In essence, this example is a simple ping pong MAS, consisting of two AgentNodes, each provided with one Agent. AgentNode 1 hosts a ping agent, AgentNode 2 hosts a pong agent. The AgentNode Configuration has been extended in such a way that the communication (as well as the authentication) between the AgentNodes is secured by TLS.

To achieve this goal this example comes with Java key- and truststores. Each communication component of the MAS (i.e. AgentNodes and ASGARD) owns it own pair of stores. These stores are password protected (changeit), and they already contain suitable key pairs and certificates. This means, you don't need to touch these stores, and you also should not reuse them for a productive usage. For the latter case you have to create your own keys and certificates and to fill them into Java key- and truststores.

Furthermore in this example you will find a start script to launch ASGARD with TLS-support. You can use ASGARD 2.5, but only on a later version JConsole (executed by ASGARD) supports TLS.


>> Launching the example application ---------------------

You can launch the AgentNodes either with Eclipse (run configurations can be found in "bin/docs/eclipse_RunConfigurations/..") or with the start scripts that are generated by Maven (you will find them in "target/pingPong_WithTLS-0.0.1-SNAPSHOT-bin/pingPong_WithTLS-0.0.1-SNAPSHOT/bin").
The AgentNode Configuration explicitly defines the paths to the stores. When executing the example with Eclipse you can leave the paths as they are. When executing the application via the generated start scripts you have to change the paths from "src/main/resources/docs/stores/node1/keystore.jks" to "../etc/docs/stores/node*/*store.jks So, all you have to do is to compile the project and to execute both AgentNodes (optionally on separate computers or on the same).

If the example is executed correctly and if the TLS handshake was successful, you should see an output on the terminals as follows:

INFO [a-a352cc19e138.PingBean sendPing 51] - PingAgent1: Send ping.
INFO [a-a352cc19e138.PingBean notify 93] - PingAgent1: Ping received!

INFO [a-a354674fa04f.PongBean notify 64] - PongAgent1: Ping received.
INFO [a-a354674fa04f.PongBean sendPong 71] - PongAgent1: Sending pong message

Thats it!

It is also possible to run the application without TLS. For this please comment out all TLS specific properties in both AgentNode Configuration files.

In the case everything is set up right, ASGARD should be capable to monitor and display the TLS-secured components of the MAS. For this you have to launch ASGARD with TLS support! The easiest way to do this, is to customize the ASGARD start script template that comes with this project ("bin/docs/ASGARD_StartScripts") and to execute it. Now ASGARD should be able to display both AgentNodes.
